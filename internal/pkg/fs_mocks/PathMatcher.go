// Code generated by mockery v1.0.0. DO NOT EDIT.

package fs_mocks

import fs "github.com/fbiville/headache/internal/pkg/fs"
import mock "github.com/stretchr/testify/mock"
import vcs "github.com/fbiville/headache/internal/pkg/vcs"

// PathMatcher is an autogenerated mock type for the PathMatcher type
type PathMatcher struct {
	mock.Mock
}

// MatchFiles provides a mock function with given fields: changes, includes, excludes, filesystem
func (_m *PathMatcher) MatchFiles(changes []vcs.FileChange, includes []string, excludes []string, filesystem *fs.FileSystem) []vcs.FileChange {
	ret := _m.Called(changes, includes, excludes, filesystem)

	var r0 []vcs.FileChange
	if rf, ok := ret.Get(0).(func([]vcs.FileChange, []string, []string, *fs.FileSystem) []vcs.FileChange); ok {
		r0 = rf(changes, includes, excludes, filesystem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vcs.FileChange)
		}
	}

	return r0
}

// ScanAllFiles provides a mock function with given fields: includes, excludes, filesystem
func (_m *PathMatcher) ScanAllFiles(includes []string, excludes []string, filesystem *fs.FileSystem) ([]vcs.FileChange, error) {
	ret := _m.Called(includes, excludes, filesystem)

	var r0 []vcs.FileChange
	if rf, ok := ret.Get(0).(func([]string, []string, *fs.FileSystem) []vcs.FileChange); ok {
		r0 = rf(includes, excludes, filesystem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vcs.FileChange)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string, *fs.FileSystem) error); ok {
		r1 = rf(includes, excludes, filesystem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
